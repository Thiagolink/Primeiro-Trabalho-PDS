
import Imagem.ScaleImage;
import Imagem.Segmentation;
import Imagem.ToColor;
import Files.TextFileToTAD;
import Files.CreateTextFiles;
import Files.ICreateFiles;
import Files.IFileToTAD;
import Files.IReadFiles;
import Files.IRenameFiles;
import Files.IWriteFiles;
import Files.ReadTextFiles;
import Files.RenameTextFiles;
import Files.WriteTextFiles;
import br.ufrn.imd.lp2.imagesegmentation.ImageInformation;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Thiago Oliveira
 */
public class SystemSegmentationGUI extends javax.swing.JFrame {

    /**
     * Creates new form GUI
     */
    
    //Inteiro com localização do mouse em x.
    int mouseX1 = 0,

    /**
     * Creates new form SystemSegmentationGUI
     */
    mouseX2 = 0;
    //Inteiro com localização do mouse em y.
    int mouseY1 = 0, mouseY2 = 0;
    //Informações da Imagem segmentada.
    ImageInformation seg;
       
    //Cria um objeto da classe Segmentation.
    Segmentation imageTreatment = new Segmentation(); 
    
    //Cria um objeto da classe Manager.
    Manager manager = new Manager();
    
    //Cria um objeto da classe TADManipulation
    TADManipulation tadManipulation = new TADManipulation();
    
    //Cria um objeto da classe ToColor.
    ToColor toColor = new ToColor();
    
    //Cria um objeto da classe Checking.
    Checking checking = new Checking();
    
    ScaleImage scaleImage = new ScaleImage();
    
    //Cria um objeto da classe RenameTextFiles.
    IRenameFiles rename= new RenameTextFiles();
    
    //Cria um objeto da classe WriteTextFiles.
    IWriteFiles writeFiles = new WriteTextFiles();
    
    //Cria um objeto da classe ReadTextFiles.
    IReadFiles readFiles = new ReadTextFiles();
    
    //Cria um objeto da classe TextFileToTAD.
    IFileToTAD fileToTAD = new TextFileToTAD();
    
    //Cria um objeto da classe CreateTextFiles
    ICreateFiles createTextFiles = new CreateTextFiles();
    
    //ArrayList com o nome das regiões da imagem para ser usado como índice para o map.
    ArrayList<String> listNameRegion = new ArrayList<>();
    
    //ArrayList com regiões já marcadas
    ArrayList<Integer> listInt = new ArrayList<>();
    
    //ArrayList com as regiões que foram selecionadas.
    ArrayList<String> listRegions = new ArrayList<>();
    
    //ArrayList com o nome de todas as regiões.
    Set<String> setRegionsNames = new HashSet<>();
    
    //Map com o índice sendo o nome e o Intenger sendo os valor de x e y da imageTreatment.
    Map<String, Integer[]> mapImageTreatment = new HashMap<>();
    

    
    
    
    public SystemSegmentationGUI() {
        initComponents();
        createTextFiles.createFolder();
        initRegions();
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        blurLvlText = new javax.swing.JTextField();
        colorLvlText = new javax.swing.JTextField();
        sizeLvlText = new javax.swing.JTextField();
        buttonSegment = new javax.swing.JButton();
        areaImage = new javax.swing.JLabel();
        showButtonSegment = new javax.swing.JButton();
        blurLvl = new javax.swing.JLabel();
        corLvl = new javax.swing.JLabel();
        sizeLvl = new javax.swing.JLabel();
        numSegmentations = new javax.swing.JLabel();
        openButton = new javax.swing.JButton();
        areaText = new javax.swing.JTextField();
        addButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        listRegionSegments = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        listFiles = new javax.swing.JList();
        findButton = new javax.swing.JButton();
        comboSearch = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        blurLvlText.setText("0.99");

        colorLvlText.setText("50");

        sizeLvlText.setText("500");

        buttonSegment.setText("Segmentar");
        buttonSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSegmentActionPerformed(evt);
            }
        });

        areaImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                areaImageMouseClicked(evt);
            }
        });

        showButtonSegment.setText("Mostrar Segmentação");
        showButtonSegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showButtonSegmentActionPerformed(evt);
            }
        });

        blurLvl.setText("BlurLevel");

        corLvl.setText("CorLevel");

        sizeLvl.setText("SizeLevel");

        numSegmentations.setText("Número de Segmentações: ");

        openButton.setText("Abrir Imagem");
        openButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openButtonActionPerformed(evt);
            }
        });

        addButton.setText("+");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        listRegionSegments.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listRegionSegmentsMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(listRegionSegments);

        listFiles.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listFilesMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(listFiles);

        findButton.setText("Pesquisar");
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });

        comboSearch.setMaximumRowCount(4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(96, 96, 96)
                                .addComponent(findButton))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(areaText, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(addButton))
                                .addComponent(buttonSegment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(blurLvl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(blurLvlText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(openButton)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(corLvl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(colorLvlText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(sizeLvl)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(sizeLvlText, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(numSegmentations))
                                .addComponent(showButtonSegment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))))
                        .addGap(145, 145, 145)
                        .addComponent(areaImage, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addGap(219, 219, 219))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(blurLvlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(blurLvl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorLvlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(corLvl))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sizeLvlText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(sizeLvl))
                        .addGap(18, 18, 18)
                        .addComponent(numSegmentations)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonSegment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(showButtonSegment)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(areaText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(findButton)
                            .addComponent(comboSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(areaImage, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(92, 92, 92))
        );

        areaImage.getAccessibleContext().setAccessibleDescription("");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    
    /**
        Método que coloca a imagem segmentada no label Image usando os valores de blur, cor, min e filename,
        define o tamanho da label de acordo com o tamanho da imagem e define a quantidade total de regiões segmentadas. .
    */
    private void buttonSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSegmentActionPerformed
        try{
         
            writeFiles.writeFileValue(imageTreatment.getFilename(), blurLvlText.getText(), colorLvlText.getText(), sizeLvlText.getText());
                
            manager.saveInformation(imageTreatment, blurLvlText.getText(), colorLvlText.getText(), sizeLvlText.getText());
            
            seg        = imageTreatment.imageSegmentation(imageTreatment.getFilename(), imageTreatment.getBlurLevel(), imageTreatment.getColor(), imageTreatment.getMinSize());
            areaImage.setIcon(imageTreatment.markedImage(seg));
            
            
            setRegionsNames = fileToTAD.nameAllRegions();
            
            numSegmentations.setText("Número de Segmentações: " + imageTreatment.totalRegions(seg));
                      
            listInt = tadManipulation.addValue(listInt, seg.getTotalRegions());
        }
        catch(NullPointerException erro){
            JOptionPane.showMessageDialog(null,"A segmentação não ocorreu, pois nenhuma imagem foi escolhida.", "Imagem",  JOptionPane.INFORMATION_MESSAGE);
        }
        catch(NumberFormatException erro){
            JOptionPane.showMessageDialog(null,"A segmentação não ocorreu, pois os valores não estão no formato correto.", "Valores",  JOptionPane.INFORMATION_MESSAGE);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SystemSegmentationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_buttonSegmentActionPerformed

    /**
        Método que coloca a imagem rotulada no label Image, usando os valores de blur, cor, min e filename
    */
    private void showButtonSegmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showButtonSegmentActionPerformed
        
        
        try{
            
            manager.saveInformation(imageTreatment, blurLvlText.getText(), colorLvlText.getText(), sizeLvlText.getText());
            
            areaImage.setIcon(toColor.colorSegmentation(seg));
            
        }
        catch(Exception NullPointerException){
            JOptionPane.showMessageDialog(null,"A segmentação não ocorreu, pois nenhuma imagem foi escolhida.", "Imagem",  JOptionPane.INFORMATION_MESSAGE);
            }
        
        
        }//GEN-LAST:event_showButtonSegmentActionPerformed
        
    /**
        Método que cria o botão Abrir Arquivo, define o caminho até a imagem e coloca no label Image.
    */
    private void openButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openButtonActionPerformed
        manager.openFile(areaImage, imageTreatment, listInt, listRegionSegments, listNameRegion, mapImageTreatment);
        
        listInt.clear();
        
    }//GEN-LAST:event_openButtonActionPerformed
    
    /**
     * Método para salvar novas regiões da imagem.
     * @param evt 
     */
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(mouseX1 == 0 || mouseY1 == 0)
            JOptionPane.showMessageDialog(null,"A área não pode ser registrada, pois não foi selecionada na imagem.", "Arquivo",  JOptionPane.INFORMATION_MESSAGE);
        else if(areaText.getText() == null)
            JOptionPane.showMessageDialog(null,"A área não pode ser registrada, pois não foi definido um nome.", "Arquivo",  JOptionPane.INFORMATION_MESSAGE);
        else if(checking.checkName(listNameRegion, areaText.getText()))
            JOptionPane.showMessageDialog(null,"A área não pode ser registrada, pois já existe uma área com esse nome.", "Arquivo",  JOptionPane.INFORMATION_MESSAGE);
        else if(checking.checkRegion(listNameRegion, mapImageTreatment, imageTreatment.defineRegion(mouseX1, mouseY1, seg), seg))
            JOptionPane.showMessageDialog(null,"A área não pode ser registrada, pois essa área já foi registrada.", "Arquivo",  JOptionPane.INFORMATION_MESSAGE);

        else{
            writeFiles.writeInFileRegions(imageTreatment.getFilename(), areaText.getText(), Integer.toString(mouseX1), Integer.toString(mouseY1), Integer.toString(mouseX2), Integer.toString(mouseY2));
            manager.transformTextListImage(imageTreatment, listRegionSegments, listNameRegion, mapImageTreatment);
        }   
        
        mouseX1=0;
        mouseX2=0;
        mouseY1=0;
        mouseY2=0;
        initRegions();
        mapImageTreatment = fileToTAD.transformToMap(imageTreatment.getFilename());
    }//GEN-LAST:event_addButtonActionPerformed
    
    /**
     * Método para capturar as coordenas da imagem clicadas pelo mouse.
     * @param evt 
     */
    private void areaImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_areaImageMouseClicked
        int region = 0;
        if(mouseX1 == 0 && mouseY1 == 0){
            mouseX1 = evt.getX();
            mouseY1 = evt.getY();
            region = imageTreatment.defineRegion(mouseX1, mouseY1, seg);
            System.out.println(mouseX1+","+mouseY1+","+region);
        }
        else{
            mouseX2 = evt.getX();
            mouseY2 = evt.getY();
            region = imageTreatment.defineRegion(mouseX2, mouseY2, seg);
            System.out.println(mouseX2+","+mouseY2+","+region+"mouse2");
        }
    }//GEN-LAST:event_areaImageMouseClicked
    
    /**
     * Método para realizar eventos quando o mouse clickar em algum elemento da Jlist1.
     * @param evt 
     */
    private void listRegionSegmentsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listRegionSegmentsMouseClicked
        if (evt.getClickCount() == 2) {
            int index = listRegionSegments.locationToIndex(evt.getPoint());
            if (index >= 0) {
                Object o = listRegionSegments.getModel().getElementAt(index);
                Integer coordenadas[] = mapImageTreatment.get(o.toString());
                System.out.println(mapImageTreatment.get("blusa"));
                int region1 = imageTreatment.defineRegion(coordenadas[0], coordenadas[1], seg);
                
                int region2;
                if (coordenadas[2] != 0 && coordenadas[3] != 0){
                    region2 = imageTreatment.defineRegion(coordenadas[2], coordenadas[3], seg);
                    areaImage.setIcon(toColor.whitening(seg, region2, listInt));
                }
                
                areaImage.setIcon(toColor.whitening(seg, region1, listInt));

          }
        }
    }//GEN-LAST:event_listRegionSegmentsMouseClicked
    
    /**
     * Método para realizar eventos quando o mouse clickar em algum elemento da Jlist2.
     * @param evt 
     */
    private void listFilesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listFilesMouseClicked
        if (evt.getClickCount() == 2) {
            int index = listFiles.locationToIndex(evt.getPoint());
            if (index >= 0) {
                Object object = listFiles.getModel().getElementAt(index);
                System.out.println(mapImageTreatment.get("blusa"));       
                manager.readValues(object.toString(), imageTreatment, blurLvlText, colorLvlText, sizeLvlText);
                
                seg        = imageTreatment.imageSegmentation(imageTreatment.getFilename(), imageTreatment.getBlurLevel(), imageTreatment.getColor(), imageTreatment.getMinSize());
                areaImage.setIcon(imageTreatment.markedImage(seg));
                manager.transformTextListImage(imageTreatment, listRegionSegments, listNameRegion, mapImageTreatment);
                mapImageTreatment = fileToTAD.transformToMap(imageTreatment.getFilename());
                listInt.clear();
                listInt = tadManipulation.addValue(listInt, seg.getTotalRegions());
             }
        }
        
    }//GEN-LAST:event_listFilesMouseClicked
    
    /**
     * Método para ao clickar no botão "Pesquisar" e pegar o elemento do jComboBox para fazer uma busca de imagens a
     * partir do elemento do jComoBox.
     * @param evt 
     */
    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed
        String selected = comboSearch.getSelectedItem().toString();
        System.out.println(System.getProperty("user.dir")+"\\imgs");
        
        try {
            manager.transformTextListRegion(selected, listFiles, listRegions);
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SystemSegmentationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        
       
    }//GEN-LAST:event_findButtonActionPerformed
    /**
        Método que Inicializa o jComboBox com todas as regiões.
    */
    private void initRegions(){
        try {
            setRegionsNames = fileToTAD.nameAllRegions();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SystemSegmentationGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
   
        comboSearch.removeAllItems();
        Iterator<String> it = setRegionsNames.iterator();
        while(it.hasNext()){
            comboSearch.addItem(it.next());
        }
        
        Iterator<String> ite = setRegionsNames.iterator();
        while(ite.hasNext()){
            System.out.println(ite.next());
        }
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SystemSegmentationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SystemSegmentationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SystemSegmentationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SystemSegmentationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SystemSegmentationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JLabel areaImage;
    private javax.swing.JTextField areaText;
    private javax.swing.JLabel blurLvl;
    private javax.swing.JTextField blurLvlText;
    private javax.swing.JButton buttonSegment;
    private javax.swing.JTextField colorLvlText;
    private javax.swing.JComboBox comboSearch;
    private javax.swing.JLabel corLvl;
    private javax.swing.JButton findButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList listFiles;
    private javax.swing.JList listRegionSegments;
    private javax.swing.JLabel numSegmentations;
    private javax.swing.JButton openButton;
    private javax.swing.JButton showButtonSegment;
    private javax.swing.JLabel sizeLvl;
    private javax.swing.JTextField sizeLvlText;
    // End of variables declaration//GEN-END:variables
}
